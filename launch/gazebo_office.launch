<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="publish_tf" default="true"/>
  <arg name="enable_p3dx" default="true"/>
  <arg name="enable_camera_network" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="$(find sparse_dynamic_calibration)/urdf/office_env_large.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>
  <arg name="enable_ros_network" default="true" />

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <group>
    <param name="gazebo/enable_ros_network" value="$(arg enable_ros_network)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />

  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen" args="$(arg command_arg3)"/>
  </group>

  <!-- Load camera network -->
  <param name="robot_description_camnet"
    command="$(find xacro)/xacro --inorder '$(find sparse_dynamic_calibration)/urdf/camera_network.urdf.xacro'" />

  <node name="urdf_spawner_camnet" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model camera_network -param robot_description_camnet" if="$(arg enable_camera_network)"/>

  <node pkg="robot_state_publisher" type="state_publisher" name="p3dx_st_pub" if="$(arg publish_tf)">
    <remap from="robot_description" to="robot_description_camnet"/>
  </node>

  <!-- Load P3DX with a camera -->
  <param name="robot_description"
    command="$(find xacro)/xacro.py '$(find sparse_dynamic_calibration)/urdf/p3dx_with_camera.urdf.xacro'" />

  <node name="urdf_spawner_p3dx" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -y -4 -model p3dx -param robot_description" if="$(arg enable_p3dx)"/>
</launch>
